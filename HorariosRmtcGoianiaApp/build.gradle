apply from: '../buildsystem/ci.gradle'
apply from: '../buildsystem/dependencies.gradle'
apply from: '../buildsystem/android.gradle'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
}

android {
    def appConfiguration = getProject().extensions.getByName("ext")

    compileSdkVersion appConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion appConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        applicationId appConfiguration.getAt("androidApplicationId")
        minSdkVersion appConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion appConfiguration.getAt("androidTargetSdkVersion")
        versionCode appConfiguration.getAt("androidVersionCode")
        versionName appConfiguration.getAt("androidVersionName")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            if (rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                    'src/main/java',
                    'src/main/java-gen',
                    'src/main/test-gen'
            ]
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    def allDependencies = getProject().ext.allDependencies

    compile allDependencies.appCompatV7
    compile allDependencies.recyclerView
    compile allDependencies.supportV4
    compile allDependencies.supportAnnotations
    compile allDependencies.design

    def appConfiguration = getProject().extensions.getByName("ext")

    compile("com.crashlytics.sdk.android:crashlytics:${appConfiguration.crashlyticsVersion}") {
        transitive = true;
    }

    compile allDependencies.butterKnife
    compile allDependencies.timber
    compile allDependencies.nineoldandroids
    compile allDependencies.otto
    compile allDependencies.changeloglib
    compile allDependencies.materialDialogs
    compile allDependencies.greendao
    compile allDependencies.licensesdialog
    compile allDependencies.jsoup
    compile allDependencies.calligraphy

    compile allDependencies.materialNavigationDrawer
    compile allDependencies.snackbar
}
